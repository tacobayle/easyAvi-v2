resource "null_resource" "wait_https_controllers" {
  depends_on = [vsphere_virtual_machine.controller, vsphere_virtual_machine.jump]
  count = (var.no_access_vcenter.controller.cluster == true ? 3 : 1)

  connection {
    host        = vsphere_virtual_machine.jump.default_ip_address
    type        = "ssh"
    agent       = false
    user        = var.jump.username
    private_key = file(var.jump.private_key_path)
  }

  provisioner "remote-exec" {
    inline = [
      "count=1 ; until $(curl --output /dev/null --silent --head -k https://${vsphere_virtual_machine.controller[count.index].default_ip_address}); do echo \"Attempt $count: Waiting for Avi Controllers to be ready...\"; sleep 5 ; count=$((count+1)) ;  if [ \"$count\" = 120 ]; then echo \"ERROR: Unable to connect to Avi Controller API\" ; exit 1 ; fi ; done"
      ]
  }
}

resource "null_resource" "ansible_avi_cluster_1" {
  depends_on = [null_resource.wait_https_controllers]

    connection {
    host        = vsphere_virtual_machine.jump.default_ip_address
    type        = "ssh"
    agent       = false
    user        = var.jump.username
    private_key = file(var.jump["private_key_path"])
  }

  provisioner "remote-exec" {
    inline      = [
      "while [ ! -f /tmp/cloudInitDone.log ]; do sleep 1; done"
    ]
  }

  provisioner "file" {
    source      = var.jump["private_key_path"]
    destination = "~/.ssh/${basename(var.jump["private_key_path"])}"
  }

  provisioner "file" {
    source      = "ansible"
    destination = "ansible"
  }

  provisioner "remote-exec" {
    inline = [
      "sudo mkdir -p /etc/ansible",
      "echo '[defaults]' | sudo tee /etc/ansible/ansible.cfg",
      "echo 'private_key_file = /home/${var.jump.username}/.ssh/${basename(var.jump.private_key_path)}' | sudo tee -a /etc/ansible/ansible.cfg",
      "echo 'host_key_checking = False' | sudo tee -a /etc/ansible/ansible.cfg",
      "echo 'host_key_auto_add = True' | sudo tee -a /etc/ansible/ansible.cfg",
      "echo 'deprecation_warnings = False' | sudo tee -a /etc/ansible/ansible.cfg",
    ]
  }

  provisioner "remote-exec" {
    inline      = [
      "chmod 600 ~/.ssh/${basename(var.jump["private_key_path"])}",
      "cd ansible ; export ANSIBLE_NOCOLOR=True ; /home/ubuntu/.local/bin/ansible-playbook pbInitCluster.yml --extra-vars '{\"avi_version\": ${jsonencode(split(".ova", split("-", basename(var.no_access_vcenter.aviOva))[1])[0])}, \"controllerPrivateIps\": ${jsonencode(vsphere_virtual_machine.controller.*.default_ip_address)}, \"controller\": ${jsonencode(var.no_access_vcenter.controller)}, \"controllerFloatingIp\": ${jsonencode(var.no_access_vcenter.network_management.avi_ctrl_floating_ip)}, \"controllerDefaultGateway\": ${jsonencode(var.no_access_vcenter.network_management.defaultGateway)}, \"avi_username\": ${jsonencode(var.avi_username)}, \"avi_password\": ${jsonencode(var.avi_password)}}'",
    ]
  }
}

resource "null_resource" "ansible_avi_cluster_2" {
  depends_on = [null_resource.ansible_avi_cluster_1]
  count = (var.no_access_vcenter.controller.cluster == true ? 3 : 1)

  connection {
    host        = vsphere_virtual_machine.jump.default_ip_address
    type        = "ssh"
    agent       = false
    user        = var.jump.username
    private_key = file(var.jump.private_key_path)
  }

  provisioner "remote-exec" {
    inline = [
      "count=1 ; until $(curl --output /dev/null --silent --head -k https://${vsphere_virtual_machine.controller[count.index].default_ip_address}); do echo \"Attempt $count: Waiting for Avi Controllers to be ready...\"; sleep 5 ; count=$((count+1)) ;  if [ \"$count\" = 120 ]; then echo \"ERROR: Unable to connect to Avi Controller API\" ; exit 1 ; fi ; done"
    ]
  }
}

resource "null_resource" "ansible_avi_cluster_3" {
  depends_on = [null_resource.ansible_avi_cluster_2]
  connection {
    host        = vsphere_virtual_machine.jump.default_ip_address
    type        = "ssh"
    agent       = false
    user        = var.jump.username
    private_key = file(var.jump["private_key_path"])
  }

  provisioner "remote-exec" {
    inline      = [
      "cd ansible ; export ANSIBLE_NOCOLOR=True ; /home/ubuntu/.local/bin/ansible-playbook pbClusterConfig.yml --extra-vars '{\"no_access_vcenter\": ${jsonencode(var.no_access_vcenter)}, \"avi_version\": ${jsonencode(split(".ova", split("-", basename(var.no_access_vcenter.aviOva))[1])[0])}, \"controllerPrivateIps\": ${jsonencode(vsphere_virtual_machine.controller.*.default_ip_address)}, \"controller\": ${jsonencode(var.no_access_vcenter.controller)}, \"controllerFloatingIp\": ${jsonencode(var.no_access_vcenter.network_management.avi_ctrl_floating_ip)}, \"controllerDefaultGateway\": ${jsonencode(var.no_access_vcenter.network_management.defaultGateway)}, \"avi_username\": ${jsonencode(var.avi_username)}, \"avi_password\": ${jsonencode(var.avi_password)}}'",
    ]
  }
}

resource "null_resource" "ansible_avi_cloud" {
  depends_on = [null_resource.ansible_avi_cluster_3]
  connection {
   host        = vsphere_virtual_machine.jump.default_ip_address
   type        = "ssh"
   agent       = false
   user        = var.jump.username
   private_key = file(var.jump["private_key_path"])
  }

  provisioner "remote-exec" {
    inline      = [
      "cd ansible ; export ANSIBLE_NOCOLOR=True ; /home/ubuntu/.local/bin/ansible-playbook pbCloudOnly.yml --extra-vars '{\"vsphere_server\": ${jsonencode(var.vmc_vsphere_server)}, \"avi_version\": ${jsonencode(split(".ova", split("-", basename(var.no_access_vcenter.aviOva))[1])[0])}, \"controllerPrivateIps\": ${jsonencode(vsphere_virtual_machine.controller.*.default_ip_address)}, \"vsphere_password\": ${jsonencode(var.vmc_vsphere_password)}, \"controller\": ${jsonencode(var.no_access_vcenter.controller)}, \"vsphere_username\": ${jsonencode(var.vmc_vsphere_username)}, \"no_access_vcenter\": ${jsonencode(var.no_access_vcenter)}, \"avi_username\": ${jsonencode(var.avi_username)}, \"avi_password\": ${jsonencode(var.avi_password)}}'",
    ]
  }
}

resource "null_resource" "ansible_avi_se" {
  depends_on = [null_resource.ansible_avi_cloud]
  connection {
    host        = vsphere_virtual_machine.jump.default_ip_address
    type        = "ssh"
    agent       = false
    user        = var.jump.username
    private_key = file(var.jump["private_key_path"])
  }

  provisioner "remote-exec" {
    inline      = [
      "cd ansible ; export ANSIBLE_NOCOLOR=True ; /home/ubuntu/.local/bin/ansible-playbook pbSe.yml --extra-vars '{\"vsphere_server\": ${jsonencode(var.vmc_vsphere_server)}, \"avi_version\": ${jsonencode(split(".ova", split("-", basename(var.no_access_vcenter.aviOva))[1])[0])}, \"controllerPrivateIps\": ${jsonencode(vsphere_virtual_machine.controller.*.default_ip_address)}, \"vsphere_password\": ${jsonencode(var.vmc_vsphere_password)}, \"controller\": ${jsonencode(var.no_access_vcenter.controller)}, \"vsphere_username\": ${jsonencode(var.vmc_vsphere_username)}, \"no_access_vcenter\": ${jsonencode(var.no_access_vcenter)}, \"avi_username\": ${jsonencode(var.avi_username)}, \"avi_password\": ${jsonencode(var.avi_password)}}'",
    ]
  }
}

resource "null_resource" "ansible_avi_vs" {
  depends_on = [null_resource.ansible_avi_se]
  connection {
    host        = vsphere_virtual_machine.jump.default_ip_address
    type        = "ssh"
    agent       = false
    user        = var.jump.username
    private_key = file(var.jump["private_key_path"])
  }

  provisioner "remote-exec" {
    inline      = [
      "cd ansible ; export ANSIBLE_NOCOLOR=True ; /home/ubuntu/.local/bin/ansible-playbook pbVsOnly.yml --extra-vars '{\"vsphere_server\": ${jsonencode(var.vmc_vsphere_server)}, \"avi_version\": ${jsonencode(split(".ova", split("-", basename(var.no_access_vcenter.aviOva))[1])[0])}, \"controllerPrivateIps\": ${jsonencode(vsphere_virtual_machine.controller.*.default_ip_address)}, \"vsphere_password\": ${jsonencode(var.vmc_vsphere_password)}, \"controller\": ${jsonencode(var.no_access_vcenter.controller)}, \"vsphere_username\": ${jsonencode(var.vmc_vsphere_username)}, \"no_access_vcenter\": ${jsonencode(var.no_access_vcenter)}, \"avi_username\": ${jsonencode(var.avi_username)}, \"avi_password\": ${jsonencode(var.avi_password)}, \"avi_backend_servers_no_access_vcenter\": ${jsonencode(vsphere_virtual_machine.backend.*.guest_ip_addresses)}}'",
    ]
  }
}

resource "null_resource" "cgw_jump_remove" {
  depends_on = [null_resource.ansible_avi_vs]
  provisioner "local-exec" {
    command = "python3 python/pyVMC.py ${var.vmc_nsx_token} ${var.vmc_org_id} ${var.vmc_sddc_id} remove-cgw-rule easyavi_inbound_jump"
  }
}

resource "null_resource" "cgw_outbound_management_remove" {
  depends_on = [null_resource.cgw_jump_remove]
  provisioner "local-exec" {
    command = "python3 python/pyVMC.py ${var.vmc_nsx_token} ${var.vmc_org_id} ${var.vmc_sddc_id} remove-cgw-rule easyavi_management_outbound"
  }
}

resource "null_resource" "cgw_outbound_backend_remove" {
  count = (var.no_access_vcenter.application == true ? 1 : 0)
  depends_on = [null_resource.cgw_outbound_management_remove]
  provisioner "local-exec" {
    command = "python3 python/pyVMC.py ${var.vmc_nsx_token} ${var.vmc_org_id} ${var.vmc_sddc_id} remove-cgw-rule easyavi_backend_outbound"
  }
}